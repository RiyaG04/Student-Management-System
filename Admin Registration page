from tkinter import *
from PIL import Image,ImageTk
from tkinter import ttk
import pymysql as sql
import tkinter.messagebox as tmsg
import re

class Register:
    def __init__(self,root):
        self.root=root
        self.root.title("Admin Registration Page")
        self.root.geometry("1350x800")
        self.root.maxsize(1350,800)
        self.root.minsize(1350,800)
        self.root.config(bg="light green")

       #----------Background image-----------
        path="C:/Users/RIYA GUPTA/Downloads/WhatsApp Image 2022-08-23 at 9.29.07 PM.jpeg"
        self.bg=ImageTk.PhotoImage(Image.open(path))
        bg=Label(self.root,image=self.bg).place(x=580,y=0)  #rel means according to root window size

        #-----------Register Frame----------------
        frame1=Frame(self.root,bg="light pink").place(x=20,y=50,width=520,height=700)
        title=Label(frame1,text="ADMIN REGISTER",font=("times new roman",20,"bold"),bg="black",fg="purple").place(x=140,y=20)

        name=Label(frame1,text="FIRST NAME",font=("times new roman",15,"bold"),bg="cyan",fg="black").place(x=50,y=100)
        self.NameText=Entry(frame1,font=("times new roman",15),bg="light gray")
        self.NameText.place(x=50,y=140,width=250)

        LastName = Label(frame1, text="LAST NAME", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=380,y=100)
        self.LnameText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.LnameText.place(x=380, y=140, width=250)

        Contact = Label(frame1, text="CONTACT NO.", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=50,y=180)
        self.ContactText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.ContactText.place(x=50, y=220, width=250)

        Email = Label(frame1, text="E-MAIL", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=380,y=180)
        self.EmailText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.EmailText.place(x=380, y=220, width=250)

        Question = Label(frame1, text="SECURITY QUESTION", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=50,y=260)
        self.QuestionCombo = ttk.Combobox(frame1, font=("times new roman", 15),state='readonly',justify=CENTER)
        self.QuestionCombo['values']=('Select',"First Pet Name","Your Favourite Car","Your Best Friend")
        self.QuestionCombo.place(x=50, y=300, width=250)
        self.QuestionCombo.current(0)

        Answer = Label(frame1, text="ANSWER", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=380,y=260)
        self.AnswerText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.AnswerText.place(x=380, y=300, width=250)

        Password = Label(frame1, text="PASSWORD", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=50,y=340)
        self.PasswordText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.PasswordText.place(x=50, y=380, width=250)

        ConPassword = Label(frame1, text="CONFIRM PASSWORD", font=("times new roman", 15, "bold"), bg="cyan", fg="black").place(x=380,y=340)
        self.ConPasswordText = Entry(frame1, font=("times new roman", 15), bg="light gray")
        self.ConPasswordText.place(x=380, y=380, width=250)

        self.check=IntVar()
        CheckBox=Checkbutton(frame1,text="Agree the terms and conditions",variable=self.check,onvalue=1,offvalue=0,bg="pink",font=("times new roman",12,"bold")).place(x=50,y=430)

        RegButton=Button(frame1,text='REGISTER NOW',font=("times new roman", 15, "bold"),command=self.RegisterData,cursor="hand2",bg="green",fg="white",width=20).place(x=50,y=470)
        LogButton=Button(frame1,text='SIGN IN?',command=self.SigninWindow,font=("times new roman", 20, "bold"),cursor="hand2",bg="yellow",fg="black",width=15).place(x=900,y=300)

    def SigninWindow(self):
        self.root.destroy()
        import admin_login

    def clear(self):
        self.NameText.delete(0,END)
        self.LnameText.delete(0,END)
        self.ContactText.delete(0,END)
        self.EmailText.delete(0,END)
        self.QuestionCombo.current(0)
        self.AnswerText.delete(0,END)
        self.PasswordText.delete(0,END)
        self.ConPasswordText.delete(0,END)


    def RegisterData(self):
        flag=1
        if self.NameText.get()==""or self.LnameText.get()=="" or self.ContactText.get()=="" or self.EmailText.get()=="" or self.QuestionCombo.get()=="Select" or self.AnswerText.get()=="" or self.PasswordText.get()=="" or self.ConPasswordText.get()=="":
            flag=0
            tmsg.showerror("Error!!!"," All fields are Required",parent=self.root)
        if re.search("^[a-z A-Z 0-9_\-\.]+[@][a-z]+[\.][a-z]{2,3}$",self.EmailText.get())==None:
            flag=0
            tmsg.showerror("Enter Valid email address")
        if re.search("^[0-9]{10}$",self.ContactText.get())==None:
            flag=0
            tmsg.showerror("Enter Valid contact number")
        if self.PasswordText.get()!=self.ConPasswordText.get():
            flag = 0
            tmsg.showerror("Password and Confirn Password must match", parent=self.root)
        if self.check.get()==0:
            flag=0
            tmsg.showerror("ERROR!!!","Please Agree our terms &conditions")
        elif flag==1:
            try:
                db=sql.connect(host='localhost',user='root',passwd='ducat123',db='ducati')
                cur=db.cursor()
                cur.execute("select * from adminn")
                row=cur.fetchone()
                if row!=None:
                    tmsg.showinfo("INFO!!!","Admin email address already exist.")
                else:

                    q="insert into adminn values('%s','%s','%s','%s','%s','%s','%s')"%(self.NameText.get(),self.LnameText.get(),self.ContactText.get(),
                                                                     self.EmailText.get(),
                                                                     self.QuestionCombo.get(),self.AnswerText.get(),self.PasswordText.get())
                    cur.execute(q)
                    db.commit()
                    db.close()
                    tmsg.showinfo("SUCCESSFULLY SAVED THE RECORD!!!!")
                    self.clear()
            except Exception as e:
                tmsg.showerror(e)

root=Tk()
obj=Register(root)
root.mainloop()
